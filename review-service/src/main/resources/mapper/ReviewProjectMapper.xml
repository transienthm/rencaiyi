<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mapper.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hr.wozai.service.review.server.dao.ReviewProjectMapper">

    <insert id="insertReviewProject"
            parameterType="ReviewProject">
        INSERT INTO review_project
        (
            org_id,
            template_id,
            reviewee_id,
            name,
            role,
            score,
            comment,
            created_time,
            last_modified_user_id,
            last_modified_time,
            extend,
            is_deleted
        )
        VALUES
        (
            #{orgId},
            #{templateId},
            #{revieweeId},
            #{name},
            #{role},
            #{score},
            #{comment},
            ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000),
            #{lastModifiedUserId},
            ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000),
            #{extend},
            0
        )
        <selectKey keyProperty="projectId" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="findReviewProject"
            parameterType="map"
            resultType="ReviewProject">
        SELECT
            *
        FROM
            review_project
        WHERE
            project_id = #{projectId}
            AND org_id = #{orgId}
            AND is_deleted = 0
    </select>

    <select id="listReviewProject"
            parameterType="map"
            resultType="ReviewProject">
        SELECT
            *
        FROM
            review_project
        WHERE
            org_id = #{orgId}
            AND template_id = #{templateId}
            AND reviewee_id = #{revieweeId}
            AND is_deleted = 0
        ORDER BY created_time ASC
    </select>

    <update id="updateReviewProject"
            parameterType="ReviewProject">
        UPDATE
            review_project
        <set>
            <if test="null != name">name = #{name},</if>
            <if test="null != role">role = #{role},</if>
            <if test="null != score">score = #{score},</if>
            <if test="null != comment">comment = #{comment},</if>
            <if test="null != extend">extend = #{extend},</if>
            last_modified_user_id = #{lastModifiedUserId},
            last_modified_time = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
        </set>
        WHERE
            project_id = #{projectId}
            AND org_id = #{orgId}
            AND is_deleted = 0
    </update>

    <update id="deleteReviewProject"
            parameterType="map">
        UPDATE
            review_project
        SET
            is_deleted = 1,
            last_modified_user_id = #{lastModifiedUserId},
            last_modified_time = ROUND(UNIX_TIMESTAMP(CURTIME(4)) * 1000)
        WHERE
            project_id = #{projectId}
            AND org_id = #{orgId}
            <!--To strict limit update is validate-->
            AND is_deleted = 0
    </update>

    <select id="listProjectRevieweeIdOfTemplate"
            parameterType="map"
            resultType="ReviewProject">
        SELECT
            distinct reviewee_id
        FROM
            review_project
        WHERE
            org_id = #{orgId}
            AND template_id = #{templateId}
            AND is_deleted = 0
    </select>

    <insert id="batchInsertReviewProjects"
            useGeneratedKeys="true"
            parameterType="list">
        INSERT INTO review_project
        (
            org_id,
            template_id,
            reviewee_id,
            name,
            role,
            score,
            comment,
            created_time,
            last_modified_user_id,
            last_modified_time,
            extend,
            is_deleted
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
                #{item.orgId},
                #{item.templateId},
                #{item.revieweeId},
                #{item.name},
                #{item.role},
                #{item.score},
                #{item.comment},
                #{item.createdTime},
                #{item.lastModifiedUserId},
                #{item.lastModifiedTime},
                #{item.extend},
                #{item.isDeleted}
            )
        </foreach>
    </insert>

</mapper>
